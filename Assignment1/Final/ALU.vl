// To Run This Code
// iverilog -o ALU ALU.vl
// vvp ALU

            //Names:
/*          
    1-  Ahmed Sayed Hassan               --> 20190034
    2-  Khaled Ashraf Hanafy             --> 20190186
    3-  Ebrahim Mohamed Ebrahim Hegy     --> 20190009
    4-  Omar Mohamed Mahmoud             --> 20190730
    5-  Sondos Emara Gomaa               --> 20190249
*/

`define NUM_BITS 4
//My Main Functions

    //fullAdder
module fullAdder(output S, output Cout,input A,input B,input Cin);
   wire   w0,w1,w2,w3;
   
   xor(w0, A, B);
   xor(S, Cin, w0);
   and(w1, A, B);   
   and(w2, A, Cin);
   and(w3, B, Cin);   
   or(Cout, w1, w2, w3);
endmodule

    //Multiplexer 2 To 1
module Multi_2x1(output out,input n1,input n2,input n3);
      wire FirstAnd, SecondAnd, C;
      
      not (C,n3);
      and (FirstAnd, n1, C);
      and (SecondAnd, n2, n3);
      or (out, FirstAnd, SecondAnd);
endmodule

    //Multiplexer 4 To 1 Using Thre Multiplexer 2 To 1
module Multi_4x1(output out,input i0,input i1,input i2,input i3,input s1,input s0);
      wire outputFirstMul,outputSecondmux2;

      Multi_2x1 Multi_1(outputFirstMul,i0,i1,s1);
      Multi_2x1 Multi_2(outputSecondmux2,i2,i3,s1);
      Multi_2x1 Multi_3(out,outputFirstMul,outputSecondmux2,s0);
endmodule

    //Adding two N-bit numbers  *****< we Use ALU circuit instead of this function >*****
module N_bit_adder(output [M:0] s, output out, input [M:0] a, input [M:0] b , in);
    parameter N = `NUM_BITS;
    parameter M = `NUM_BITS-1;

    wire in;
    assign in=0;
    wire [M:1]c;

    fullAdder f0(a[0],b[0],in,c[1],s[0]);

    generate
    genvar i;

    for(i=1;i<M;i=i+1)
        begin  
            fullAdder f1(a[i],b[i],c[i],c[i+1],s[i]);
        end
    endgenerate

    fullAdder f3(a[M],b[M],c[M],out,s[M]);

endmodule 

    //Subtracting two N-bit numbers.  *****< we Use ALU circuit instead of this function >*****
module Sub_N_bits_Num(output [M:0] S,output C,output cout,input [M:0] A,input [M:0] B);
    
   parameter M = `NUM_BITS-1;

   wire  cin;      // if it = 0 then we add if it = 1 we substract . 
   assign cin =1; 
   wire [M:0] carry; //C
   wire [M:0] Out; //B

    generate
    genvar i;

    for(i=0;i<=M;i=i+1)
        begin  
            xor(Out[i], B[i], cin);
        end
    endgenerate

   xor(C, carry[M], cin); //Carry does not equals C3 for subtraction.
   xor(cout, carry[M], carry[M-1]);

    fullAdder f0(S[0], C0, A[0], B0, cin);

    generate
    genvar k;

    for(k=1;k<=M;k=k+1)
        begin  
            fullAdder f1(S[k], carry[k], A[k], Out[k], carry[k-1]);
        end
    endgenerate

endmodule

    //Adding 1 to a N-bit number.   *****< we Use ALU circuit instead of this function >*****
module add_N_bitNum_ByOne(output [M:0] S, output Out, input [M:0] A);
   parameter M = `NUM_BITS-1;
   wire cin;  
   assign cin =1; 
   wire y; 
   assign y =0; 
   wire [M:0] C; 

    generate
    genvar i;

    for(i=0;i<=M;i=i+1)
        begin  
             fullAdder f0(S[i], C[i], A[i], y, cin);  
        end
    endgenerate

endmodule

    // Subtracting 1 from a N-bit number.   *****< we Use ALU circuit instead of this function >*****
module Sub_N_bitNum_ByOne(output [M:0] S,output Out,input [M:0] A);
   parameter M = `NUM_BITS-1;
   wire cin;  
   assign cin =0; 
   wire y; 
   assign y =1; 
   wire C[M:0];

    generate
    genvar i;

    for(i=0;i<=M;i=i+1)
        begin  
             fullAdder f0(S[i], C[i], A[i], y, cin);  
        end
    endgenerate 

endmodule

    //Bitwise ANDing two 1-bit numbers.
module bitwise_AND (output out ,input wire n1,input wire n2);
    
    wire  out  =   n1&n2;
 
endmodule

    // Bitwise ORing two 1-bit numbers.
module bitwise_OR (output out, input wire n1,input wire n2);
    
    wire out   =    n1|n2;

endmodule

    // Bitwise XORing two 1-bit numbers.
module bitwise_XOR (output out , input wire n1,input wire n2);
    
    wire out  =    n1^n2;   

endmodule

    //Arithmetic shifting right of a N-bit number that will discard the least significant bit.
module shiftRight(output wire [M:0] out,input wire[M:0] in);

    parameter M = `NUM_BITS-1;

    generate
    genvar i;

        for(i=0;i<M;i=i+1)

            begin  
                assign out[i] = in[i+1];
            end
    endgenerate
            
    assign out[M] = in[M];

endmodule

    //Arithmetic shifting Left of a N-bit number that will discard the least significant bit.
module shiftLeft(output wire [M:0] out,input wire[M:0] in);
       
    parameter M = `NUM_BITS-1;

    assign out[0] = 0;

    generate
    genvar i;

    for(i=1;i<=M;i=i+1)
   
        begin  
            assign out[i] = in[i-1];
        end
    endgenerate

endmodule

    //Arthmetic_Circuit for 1 bits <One Stage>
module Arthmetic_Circuit(output wire carry,output wire Sum,input wire cin,input wire s1,input wire s0,input wire A,input wire B);
    output wire FirstMulti;
    wire NOTB;
    not(NOTB,B);
   
    // out,i0,i1,i2,i3,s1,s0
    Multi_4x1 m1(FirstMulti , B , NOTB , 0 , 1 , s1 , s0);
    //S, Cout, A, B, Cin
    fullAdder f1(Sum , carry , A , FirstMulti , cin);

endmodule

    //LogicGates for 1 Bits <One Stage>
module LogicGates(output wire E,input wire s1,input wire s0,input A,input B);
    output wire OutOfAnd,OutOfOr,OutOfXor,OutOfNot;
    bitwise_AND AND(OutOfAnd,A,B);
    bitwise_OR OR(OutOfOr,A,B);
    bitwise_XOR XOR(OutOfXor,A,B);
    not(OutOfNot,A);

    Multi_4x1 m1(E,OutOfAnd,OutOfOr,OutOfXor,OutOfNot,s0,s1);//  -->  s1 s0

endmodule

    //main Component
module ALU(output wire [N:0] F,input wire s3,input wire s2,input wire s1,input wire s0,input wire cin,input wire [M:0] A,input wire [M:0] B);

    parameter N = `NUM_BITS;
    parameter M = `NUM_BITS-1;

    wire [M:0] Shift_Right ;
    shiftRight SHR(Shift_Right,A);

    wire [M:0] Shift_Left ;
    shiftLeft SHL(Shift_Left,A);

    wire [N:0]carries;
    assign carries[0] = cin;
    
    generate
    genvar i;

    for(i=0;i<=M;i=i+1)
   
        begin  
            wire Sum,E,carry;
            Arthmetic_Circuit A1 (carry,Sum,carries[i],s0,s1,A[i],B[i]); //s0 -> s1
            assign carries[i+1] = carry;
            
            LogicGates L1(E,s1,s0,A[i],B[i]);
            Multi_4x1 m1(F[i],Sum,E,Shift_Left[i],Shift_Right[i],s2,s3);// --> s3 s2

        end
    endgenerate

    assign F[N] = carries[N];

    initial
    begin
        $monitor("F = %b",F);
    end

endmodule

module main();
    parameter N = `NUM_BITS;
    wire [N:0] A = 4'b0111;
    wire [N:0] B = 4'b1011;
    wire [N+1:0] F;//output N+1 bits in ALU

    ALU alu1(F, 0, 0 , 0 , 0 , 0 , A , B);

endmodule

    //real TestCases For ALU
/*
module TestCases();
        //  F, 0, 0 , 0 , 0 , 0 , A , B  --> result = 10010
        //  F, 0, 0 , 0 , 0 , 1 , A , B  --> result = 10011
        //  F, 0, 0 , 0 , 1 , 0 , A , B  --> result = 01011
        //  F, 0, 0 , 0 , 1 , 1 , A , B  --> result = 01100
        //  F, 0, 0 , 1 , 0 , 0 , A , B  --> result = 00111
        //  F, 0, 0 , 1 , 0 , 1 , A , B  --> result = 01000
        //  F, 0, 0 , 1 , 1 , 0 , A , B  --> result = 10110
        //  F, 0, 0 , 1 , 1 , 1 , A , B  --> result = 10111

        //  F, 0, 1 , 0 , 0 , 1 , A , B  --> result = 10011
        //  F, 0, 1 , 0 , 1 , 1 , A , B  --> result = 01111
        //  F, 0, 1 , 1 , 0 , 1 , A , B  --> result = 01100
        //  F, 0, 1 , 1 , 1 , 1 , A , B  --> result = 11000

        //  F, 1, 0 , 0 , 1 , 1 , A , B  --> result = 01110
        //  F, 1, 1 , 0 , 1 , 1 , A , B  --> result = 00011

        //s3 s2  --> Arth Logic shift
            //s1 s0 --> Arth
                //cin 0
                    // 0 0 A+B          
                    // 0 1 A + not b 
                    // 1 0 A            
                    // 1 1 A-1          
                //cin 1
                    // 0 0 A + B + 1    
                    // 0 1 A + NOT B +1 
                    // 1 0 A + 1        
                    // 1 1 A
            //s1 s0 --> logic
                // 0 0 and      
                // 0 1 or       
                // 1 0 xor      
                // 1 1 not a    
            
            //s3 s2 -->Shift
                //1 0 shiftleft A    
                //1 1 shiftright A   
    endmodule
*/